/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package code;

import com.opencsv.CSVReader;
import org.junit.Test;
import weka.classifiers.functions.SMO;
import weka.core.Attribute;
import weka.core.DenseInstance;
import weka.core.Instances;
import weka.core.converters.ConverterUtils.DataSource;

import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

import static org.hamcrest.CoreMatchers.*;
import static org.hamcrest.MatcherAssert.assertThat;

public class AppTest {

    @Test
    public void testCountMinUpdate(){

        //Create heavy hitter object
        NewHeavyHitters hh = new NewHeavyHitters(5);

        //Initialize 32 HH count mins
        hh.cms = new CountMinSketch[32];
        for(int i = 0; i<32; i++){
             hh.cms[i] = new CountMinSketch(20, 15, 1000003);
        }

        //Adds 7 items for each count min and initializes them to zero
        for(CountMinSketch cm : hh.cms){
            for(int i = 0; i<7; i++){
                cm.add(i,0);
            }
        }

        //Update heavy hitter
        hh.update(7, 1);

        //Layer 0, item 7 has been incremented
        assertThat(hh.cms[0].estimateCount(7), is(1));

        //Layer 1, item 3 has been incremented
        assertThat(hh.cms[1].estimateCount(3), is(1));

        //Layer 2, item 1 has been incremented
        assertThat(hh.cms[2].estimateCount(1), is(1));

        //Layer 3, item 0 has been incremented
        assertThat(hh.cms[3].estimateCount(0), is(1));


        //Testing for false positives
        assertThat(hh.cms[0].estimateCount(6), is(not(equalTo(1))));
        assertThat(hh.cms[0].estimateCount(5), is(not(equalTo(1))));
        assertThat(hh.cms[1].estimateCount(5), is(not(equalTo(1))));
        assertThat(hh.cms[2].estimateCount(3), is(not(equalTo(1))));
    }


    @Test
    public void testCountMinQuery(){

        //Create heavy hitter object
        NewHeavyHitters hh = new NewHeavyHitters(3);

        hh.update(3, 2);
        hh.update(8, 4);
        hh.update(12, 2);
        hh.update(15, 5);

        //Query heavy hitters
        ArrayList<Integer> heavyHittersList = new ArrayList<>();
        hh.query(heavyHittersList);

        //Only leaf nodes 8 and 15 are heavy
        assertThat(heavyHittersList.size(), is(2));
        assertThat(heavyHittersList.get(0), is(8));
        assertThat(heavyHittersList.get(1), is(15));

    }


    @Test
    public void testSVM() throws Exception {

        /*
        //Importing data
        InputStreamReader streamReader = new InputStreamReader(App.class.getClassLoader().getResourceAsStream("listings.csv"));
        CSVReader reader = new CSVReader(streamReader);
        String[] nextLine;
        List<String> stringArr = new ArrayList<>();
        while ((nextLine = reader.readNext()) != null) {
            stringArr.add(nextLine[6]);
        }


        ArrayList<Attribute> attributes = new ArrayList<>();
        attributes.add(new Attribute("attr_0"));

        //Create dataset?
        Instances data = new Instances("MyDataset", attributes, 0);

        //Add instances to the dataset
        for (String str : stringArr) {
            DenseInstance instance = new DenseInstance(1);
            instance.setValue(0, str);
            data.add(instance);
        }
         */




    }


}
